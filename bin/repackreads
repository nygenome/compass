#!/usr/bin/env python 

################################################################################
### COPYRIGHT ##################################################################

# New York Genome Center

# SOFTWARE COPYRIGHT NOTICE AGREEMENT
# This software and its documentation are copyright (2016) by the New York
# Genome Center. All rights are reserved. This software is supplied without
# any warranty or guaranteed support whatsoever. The New York Genome Center
# cannot be responsible for its use, misuse, or functionality.

################################################################# /COPYRIGHT ###
################################################################################



################################################################################
### MODULES ####################################################################

from optparse import OptionParser
import sys

################################################################### /MODULES ###
################################################################################



################################################################################
### FUNCTIONS ##################################################################

def readunpackedpairs(filepath):
	if filepath == 'stdin':
		unpackedfile = sys.stdin
	else:
		unpackedfile = open(filepath, 'r')
	for line in unpackedfile:
		featid, rid0, seq0, qual0, rid1, seq1, qual1 = line.rstrip().split('\t')
		yield featid, rid0, seq0, qual0, rid1, seq1, qual1

def readbedseq(filepath):
	if filepath == 'stdin':
		bedseq = sys.stdin
	else:
		bedseq = open(filepath, 'r')
	for line in bedseq:
		chrm, start, end, name, score, strand, seq = line.rstrip().split('\t')
		yield chrm, int(start), int(end), name, int(score), strand, seq			

def makebedseqdict(bedseq):
	bedseqdict = {}
	for chrm, start, end, name, score, strand, seq in bedseq:
		bedseqdict[name] = (chrm, start, end, name, score, strand, seq)
	return bedseqdict

def repackreads(unpackedpairs, bedseqdict):
	featid0, seqs0, quals0 = None, [], []
	for featid, rid0, seq0, qual0, rid1, seq1, qual1 in unpackedpairs:
		if featid != featid0:
			if featid0:
				chrm, start, end, name, score, strand, seq = bedseqdict[featid0] 
				yield chrm, start, end, name, score, strand, seq, '|'.join(seqs0), '|'.join(quals0)
			featid0, seqs0, quals0 = featid, [], []
		seqs0.append(seq0)
		seqs0.append(seq1)
		quals0.append(qual0)
		quals0.append(qual1)
	if featid0:
		chrm, start, end, name, score, strand, seq = bedseqdict[featid0] 
		yield chrm, start, end, name, score, strand, seq, '|'.join(seqs0), '|'.join(quals0)

################################################################# /FUNCTIONS ###
################################################################################



################################################################################
### ARGUMENTS,OPTIONS ##########################################################

parser = OptionParser(usage="\n%prog [options]", version="%prog 0.1")

parser.add_option(
	"-i",
	metavar = "FILE",
	type = "string",
	dest = "unpackfile",
	default = 'stdin',
	help = "Unpacked reads filename [STDIN]"
	)

parser.add_option(
	"-b",
	metavar = "FILE",
	type = "string",
	dest = "bedseq",
	default = None,
	help = "Input BEDSEQ filename [MANDATORY]"
	)

(opt, args) = parser.parse_args()
        
######################################################### /ARGUMENTS,OPTIONS ###
################################################################################



################################################################################
### CONSTANTS ##################################################################

################################################################# /CONSTANTS ###
################################################################################



################################################################################
### MAIN #######################################################################

if __name__ == "__main__":
	# read bedseq
	bedseq = readbedseq(opt.bedseq)
	bedseqdict = makebedseqdict(bedseq)

	# initialize generators
	unpackedpairs = readunpackedpairs(opt.unpackfile)
	repackedreads = repackreads(unpackedpairs, bedseqdict)

	# run
	for chrm, start, end, name, score, strand, seq, seqs, quals in repackedreads:
		sys.stdout.write('\t'.join((chrm, str(start), str(end), name, str(score), strand, seq, seqs, quals)) + '\n')

###################################################################### /MAIN ###
################################################################################
